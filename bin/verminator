#!/usr/bin/env python3
import sys
import argparse
import os
from pathlib import Path
import yaml
from verminator import *
from verminator.utils import *

class VerminatorCmd(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='TDC image version management terminator.',
            usage= '''verminator <command> [<args>]

The most commonly used verminator commands are:
   validate    Validate existing image versions and fix errors automatically
   create      Create a new release version
''')
        parser.add_argument('command', help='Subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        getattr(self, args.command)()

    def validate(self):
        parser = argparse.ArgumentParser(
            description='Validate existing image versions and fix errors automatically')
        parser.add_argument('--releasemeta', help='the releases_meta.yml file')
        parser.add_argument('-c', '--component', help='a specific instance to validate')
        parser.add_argument('-d', '--dump', action='store_true', help='dump the validated content to files')
        parser.add_argument('instance_folder', help='the instances folder of images definition')
        args = parser.parse_args(sys.argv[2:])
        print('Running validation, instance_folder=%s, releasemeta=%s' % \
        	(args.instance_folder, args.releasemeta))
        walk_through(args.instance_folder, args.releasemeta, args.component, args.dump)

    def create(self):
        parser = argparse.ArgumentParser(
            description='Create a new release version')
        # NOT prefixing the argument with -- means it's not optional
        parser.add_argument('version')
        args = parser.parse_args(sys.argv[2:])
        print('Running creation, version=%s' % args.version)


def walk_through(instance_folder, releasemeta=None, component=None, dump=False):
	p = Path(instance_folder)
	assert p.is_dir()

	if releasemeta is not None:
		releasemeta = Path(releasemeta)
	else:
		releasemeta = p.joinpath('releases_meta.yaml')
	assert releasemeta.is_file()

	meta = ProductReleaseMeta(releasemeta)

	component_found = False
	for instance in p.iterdir():
		if not instance.is_dir():
			continue

		if component is not None:
			if instance.name != component:
				continue
			else:
				component_found = True

		for ver in instance.iterdir():
			image_file = ver.joinpath('images.yaml')			
			
			print(image_file)
			
			dat = yaml.load(open(image_file))
			ins = Instance(**dat)
			ins.validate(meta)

			yaml_str = ins.to_yaml()
			if yaml_str and dump:
				with open(image_file, 'w') as of:
					of.write(yaml_str)
			else:
				print(yaml_str)

	if component is not None and not component_found:
		print('Warning: component %s not found in folder %s' % (component, instance_folder))


if __name__ == '__main__':
    VerminatorCmd()

