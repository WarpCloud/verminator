#!/usr/bin/env python3
import argparse
import sys
from pathlib import Path

from verminator import *
from verminator.utils import *


class VerminatorCmd(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='TDC image version management terminator.',
            usage='''verminator <command> [<args>]

The most commonly used verminator commands are:
   validate         Validate existing image versions and fix errors automatically
   createversion    Create a new release version
   createoem		Convert TDC into OEM release
''')
        parser.add_argument('command', help='Subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        getattr(self, args.command)()

    def validate(self):
        parser = argparse.ArgumentParser(
            description='Validate existing image versions and fix errors automatically')
        parser.add_argument('-c', '--component', help='a specific instance to validate')
        parser.add_argument('--releasemeta', help='the releases_meta.yml file')
        parser.add_argument('instance_folder', help='the instances folder of images definition')
        args = parser.parse_args(sys.argv[2:])
        print('Running validation, instance_folder=%s, releasemeta=%s' % \
              (args.instance_folder, args.releasemeta))
        _validate_instances(args.instance_folder, args.releasemeta, args.component)

    def createversion(self):
        parser = argparse.ArgumentParser(description='Create a new release version')
        parser.add_argument('-v', '--version', required=True, help='a new version for product line')
        parser.add_argument('-c', '--component', help='a specific instance to validate')
        parser.add_argument('instance_folder', help='the instances folder of images definition')
        args = parser.parse_args(sys.argv[2:])
        print('Running version creation')
        _create_version(args.instance_folder, args.version, args.component)
        print('Running validation')
        _validate_instances(args.instance_folder)

    def createoem(self):
        parser = argparse.ArgumentParser(description='Create an OEM release')
        parser.add_argument('-o', '--oemname', required=True, help='an oem name')
        parser.add_argument('instance_folder', help='the instances folder of images definition')
        args = parser.parse_args(sys.argv[2:])
        print('Running OEM creation, oemname=%s' % args.oemname)
        VerminatorConfig.OEM_NAME = args.oemname
        _create_oem(args.instance_folder, args.oemname)
        print('Running validation')
        _validate_instances(args.instance_folder)


def _validate_instances(instance_folder, releasemeta=None, component=None):
    p = Path(instance_folder)
    assert p.is_dir()

    if releasemeta is not None:
        releasemeta = Path(releasemeta)
    else:
        releasemeta = p.joinpath('releases_meta.yaml')
    assert releasemeta.is_file()

    meta = ProductReleaseMeta(releasemeta)

    component_found = False
    for instance in p.iterdir():
        if not instance.is_dir():
            continue

        if component is not None:
            if instance.name != component:
                continue
            else:
                component_found = True

        for ver in instance.iterdir():
            image_file = ver.joinpath('images.yaml')

            print(image_file)

            dat = yaml.load(open(image_file))
            ins = VersionedInstance(**dat)
            ins.validate(meta)

            yaml_str = ins.to_yaml()
            if yaml_str:
                with open(image_file, 'w') as of:
                    of.write(yaml_str)
            else:
                print(yaml_str)

    if component is not None and not component_found:
        print('Warning: component %s not found in folder %s' % (component, instance_folder))


def _create_oem(instance_folder, oemname):
    p = Path(instance_folder)
    assert p.is_dir()
    for instance in p.iterdir():
        if not instance.is_dir():
            continue
        for ver in instance.iterdir():
            image_file = ver.joinpath('images.yaml')

            print(image_file)

            dat = yaml.load(open(image_file))
            ins = VersionedInstance(**dat)
            ins.convert_oem()

            yaml_str = ins.to_yaml()
            with open(image_file, 'w') as of:
                of.write(yaml_str)


def _create_version(instance_folder, version, component=None):
    product = product_name(version)
    p = Path(instance_folder)
    assert p.is_dir()
    for instance_path in p.iterdir():
        if not instance_path.is_dir():
            continue
        instance = Instance(instance_path.name, instance_path)

        has_version_for_product = False
        for ver, ins in instance.versioned_instances.items():
            if ins.find_latest_final_release(product):
                has_version_for_product = True

        if has_version_for_product:
            instance.create_release(version)

        instance.dump()


if __name__ == '__main__':
    VerminatorCmd()
